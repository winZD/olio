generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TenantTable {
  id        String   @id @default(uuid()) // UUID primary key for tenants
  name      String // Name of the tenant (could be an organization or company)
  contact   String? // Optional contact information for the tenant
  createdAt DateTime @default(now()) // When the tenant was created
  updatedAt DateTime @updatedAt // Last update timestamp

  orchards OrchardTable[] // One-to-many relation with OrchardTable (one tenant has many orchards)

  @@map("Tenant") // Optional: map this model to a specific table name in the database
}

model OrchardTable {
  id         String          @id @default(uuid()) // UUID primary key
  tenantId   String // Reference to TenantTable (tenant-specific identifier)
  tenant     TenantTable     @relation(fields: [tenantId], references: [id]) // Relation to TenantTable
  name       String // Name of the orchard
  location   String // Orchard location
  area       Float // Orchard area in hectares
  soilType   String // e.g., "Sandy", "Clay", "Loam"
  irrigation Boolean // Whether the orchard has irrigation
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  trees      TreeTable[]     @relation(name: "FK_Tree_Orchard") // Relation to trees
  varieties  VarietyTable[]  @relation(name: "FK_Variety_Orchard") // Relation to varieties
  harvests   HarvestTable[]  @relation(name: "FK_Harvest_Orchard") // Relation to harvests
  employees  EmployeeTable[] @relation(name: "FK_Employee_Orchard") // Relation to employees

  // Composite primary key to enforce multi-tenancy
  @@unique([id, tenantId]) // Ensure the combination of 'id' and 'tenantId' is unique
  @@map("Orchard")
}

model VarietyTable {
  id              String       @id @default(uuid()) // UUID primary key
  name            String // Variety name, e.g., "Arbequina", "Koroneiki"
  description     String? // Optional description
  origin          String? // Optional origin of the variety
  orchardId       String // UUID reference
  orchardTenantId String // Tenant ID reference
  orchard         OrchardTable @relation(name: "FK_Variety_Orchard", fields: [orchardId, orchardTenantId], references: [id, tenantId]) // Relation to orchard
  trees           TreeTable[]  @relation(name: "FK_Tree_Variety") // Relation to trees

  @@map("Variety")
}

model TreeTable {
  id              String         @id @default(uuid()) // UUID primary key
  plantedDate     DateTime // Date when the tree was planted
  age             Int // Age of the tree in years
  varietyId       String // UUID reference
  orchardId       String // UUID reference
  orchardTenantId String // Tenant ID
  variety         VarietyTable   @relation(name: "FK_Tree_Variety", fields: [varietyId], references: [id]) // Relation to variety
  orchard         OrchardTable   @relation(name: "FK_Tree_Orchard", fields: [orchardId, orchardTenantId], references: [id, tenantId]) // Relation to orchard
  harvests        HarvestTable[] @relation(name: "FK_Harvest_Tree") // Relation to harvests

  @@map("Tree")
}

model HarvestTable {
  id              String         @id @default(uuid()) // UUID primary key
  date            DateTime // Harvest date
  quantity        Float // Quantity harvested in kilograms
  quality         String // e.g., "Extra Virgin", "Virgin"
  treeId          String // UUID reference
  orchardId       String // UUID reference
  orchardTenantId String // Tenant ID
  tree            TreeTable      @relation(name: "FK_Harvest_Tree", fields: [treeId], references: [id]) // Relation to tree
  orchard         OrchardTable   @relation(name: "FK_Harvest_Orchard", fields: [orchardId, orchardTenantId], references: [id, tenantId]) // Relation to orchard
  products        ProductTable[] @relation(name: "FK_Product_Harvest") // Relation to products

  @@map("Harvest")
}

model EmployeeTable {
  id              String       @id @default(uuid()) // UUID primary key
  name            String // Employee's name
  role            String // e.g., "Farmer", "Supervisor"
  salary          Float // Employee's salary
  orchardId       String // UUID reference
  orchardTenantId String // Tenant ID
  orchard         OrchardTable @relation(name: "FK_Employee_Orchard", fields: [orchardId, orchardTenantId], references: [id, tenantId]) // Relation to orchard
  hiredAt         DateTime     @default(now()) // Hiring date

  @@map("Employee")
}

model ProductTable {
  id        String        @id @default(uuid()) // UUID primary key
  name      String // e.g., "Olive Oil", "Canned Olives"
  type      String // Product type
  price     Float // Product price
  createdAt DateTime      @default(now())
  harvestId String? // UUID reference
  harvest   HarvestTable? @relation(name: "FK_Product_Harvest", fields: [harvestId], references: [id]) // Relation to harvest

  @@map("Product")
}
